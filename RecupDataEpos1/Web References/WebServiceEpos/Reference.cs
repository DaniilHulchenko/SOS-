//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace SosMedecins.SmartRapport.RecupDataEpos1.WebServiceEpos {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcqMessagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRapportNonTransmisOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcquittementReceptionRapportOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInfoAppelOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::SosMedecins.SmartRapport.RecupDataEpos1.Properties.Settings.Default.RecupDataEpos1_org_dyndns_sos_geneve_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMessagesCompletedEventHandler GetMessagesCompleted;
        
        /// <remarks/>
        public event AcqMessagesCompletedEventHandler AcqMessagesCompleted;
        
        /// <remarks/>
        public event GetRapportNonTransmisCompletedEventHandler GetRapportNonTransmisCompleted;
        
        /// <remarks/>
        public event AcquittementReceptionRapportCompletedEventHandler AcquittementReceptionRapportCompleted;
        
        /// <remarks/>
        public event GetInfoAppelCompletedEventHandler GetInfoAppelCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMessages(string sSIM) {
            object[] results = this.Invoke("GetMessages", new object[] {
                        sSIM});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesAsync(string sSIM) {
            this.GetMessagesAsync(sSIM, null);
        }
        
        /// <remarks/>
        public void GetMessagesAsync(string sSIM, object userState) {
            if ((this.GetMessagesOperationCompleted == null)) {
                this.GetMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesOperationCompleted);
            }
            this.InvokeAsync("GetMessages", new object[] {
                        sSIM}, this.GetMessagesOperationCompleted, userState);
        }
        
        private void OnGetMessagesOperationCompleted(object arg) {
            if ((this.GetMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesCompleted(this, new GetMessagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AcqMessages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AcqMessages(string sId) {
            this.Invoke("AcqMessages", new object[] {
                        sId});
        }
        
        /// <remarks/>
        public void AcqMessagesAsync(string sId) {
            this.AcqMessagesAsync(sId, null);
        }
        
        /// <remarks/>
        public void AcqMessagesAsync(string sId, object userState) {
            if ((this.AcqMessagesOperationCompleted == null)) {
                this.AcqMessagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcqMessagesOperationCompleted);
            }
            this.InvokeAsync("AcqMessages", new object[] {
                        sId}, this.AcqMessagesOperationCompleted, userState);
        }
        
        private void OnAcqMessagesOperationCompleted(object arg) {
            if ((this.AcqMessagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcqMessagesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRapportNonTransmis", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetRapportNonTransmis() {
            object[] results = this.Invoke("GetRapportNonTransmis", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetRapportNonTransmisAsync() {
            this.GetRapportNonTransmisAsync(null);
        }
        
        /// <remarks/>
        public void GetRapportNonTransmisAsync(object userState) {
            if ((this.GetRapportNonTransmisOperationCompleted == null)) {
                this.GetRapportNonTransmisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRapportNonTransmisOperationCompleted);
            }
            this.InvokeAsync("GetRapportNonTransmis", new object[0], this.GetRapportNonTransmisOperationCompleted, userState);
        }
        
        private void OnGetRapportNonTransmisOperationCompleted(object arg) {
            if ((this.GetRapportNonTransmisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRapportNonTransmisCompleted(this, new GetRapportNonTransmisCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AcquittementReceptionRapport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AcquittementReceptionRapport(int iNumeroAppel, int IdPatient) {
            this.Invoke("AcquittementReceptionRapport", new object[] {
                        iNumeroAppel,
                        IdPatient});
        }
        
        /// <remarks/>
        public void AcquittementReceptionRapportAsync(int iNumeroAppel, int IdPatient) {
            this.AcquittementReceptionRapportAsync(iNumeroAppel, IdPatient, null);
        }
        
        /// <remarks/>
        public void AcquittementReceptionRapportAsync(int iNumeroAppel, int IdPatient, object userState) {
            if ((this.AcquittementReceptionRapportOperationCompleted == null)) {
                this.AcquittementReceptionRapportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcquittementReceptionRapportOperationCompleted);
            }
            this.InvokeAsync("AcquittementReceptionRapport", new object[] {
                        iNumeroAppel,
                        IdPatient}, this.AcquittementReceptionRapportOperationCompleted, userState);
        }
        
        private void OnAcquittementReceptionRapportOperationCompleted(object arg) {
            if ((this.AcquittementReceptionRapportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcquittementReceptionRapportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInfoAppel", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetInfoAppel(int iNumeroAppel) {
            object[] results = this.Invoke("GetInfoAppel", new object[] {
                        iNumeroAppel});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetInfoAppelAsync(int iNumeroAppel) {
            this.GetInfoAppelAsync(iNumeroAppel, null);
        }
        
        /// <remarks/>
        public void GetInfoAppelAsync(int iNumeroAppel, object userState) {
            if ((this.GetInfoAppelOperationCompleted == null)) {
                this.GetInfoAppelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInfoAppelOperationCompleted);
            }
            this.InvokeAsync("GetInfoAppel", new object[] {
                        iNumeroAppel}, this.GetInfoAppelOperationCompleted, userState);
        }
        
        private void OnGetInfoAppelOperationCompleted(object arg) {
            if ((this.GetInfoAppelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInfoAppelCompleted(this, new GetInfoAppelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetMessagesCompletedEventHandler(object sender, GetMessagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AcqMessagesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetRapportNonTransmisCompletedEventHandler(object sender, GetRapportNonTransmisCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRapportNonTransmisCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRapportNonTransmisCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AcquittementReceptionRapportCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetInfoAppelCompletedEventHandler(object sender, GetInfoAppelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInfoAppelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInfoAppelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591